cl <- rainbow(5)
for (i in 1:5) {
lines(grid, coefs_if[i, ], col = cl[i])
}
legend("topright", legend = 1:5, col=cl, pch=1)
comp <- matrix(0, 2, 3)
sdata <- function(data) {
apply(data, 2, function(x){(x - mean(x)) / sqrt( mean((x - mean(x))^2) ) })
}
lasso <- function(data, lambda, b_initial = rep(0, p),
eps = 1e-06, max = 1000) {
# standardise
data <- sdata(data)
b <- matrix(b_initial, nrow = 2, ncol = p, byrow = TRUE)
o <- c()
crit <- 0
i <- 1
while (i <= max) {
i <- i + 1
b[2, ] <- b[1, ]
b[1, ] <- lasso.update(b[2, ], data, lambda)
o <- c(o, lasso.objective(b[1, ], data, lambda))
if (max(abs(b[1, ] - b[2, ])) < eps) {
crit = 1
break
}
}
ans <- list(b[1, ], o,
ifelse(crit, 'eps', 'max'))
return(ans)
}
blasso <- sapply(mc, function(x){lasso(x, 20)})
lasso(mc[[1]], 20)
sdata <- function(data) {
data[, 1] <- data[, 1] - mean(data[, 1])
data[, -1] <- apply(data[, -1], 2, function(x){(x - mean(x)) / sqrt( mean((x - mean(x))^2) ) })
}
lasso <- function(data, lambda, b_initial = rep(0, p),
eps = 1e-06, max = 1000) {
# standardise
data <- sdata(data)
b <- matrix(b_initial, nrow = 2, ncol = p, byrow = TRUE)
o <- c()
crit <- 0
i <- 1
while (i <= max) {
i <- i + 1
b[2, ] <- b[1, ]
b[1, ] <- lasso.update(b[2, ], data, lambda)
o <- c(o, lasso.objective(b[1, ], data, lambda))
if (max(abs(b[1, ] - b[2, ])) < eps) {
crit = 1
break
}
}
ans <- list(b[1, ], o,
ifelse(crit, 'eps', 'max'))
return(ans)
}
lasso(mc[[1]], 20)
sdata <- function(data) {
data[, 1] <- data[, 1] - mean(data[, 1])
data[, -1] <- apply(data[, -1], 2, function(x){(x - mean(x)) / sqrt( mean((x - mean(x))^2) ) })
data
}
lasso(mc[[1]], 20)
lasso.update <- function(b, data, lambda) {
for (k in 1:length(b)) {
ytilde <- data[, 1] - data[, -c(1, k + 1)] %*% b[-k]
cov <- ytilde[, 1] %*% data[, k + 1]
var <- data[, k + 1] %*% data[, k + 1]
b[k] <- ifelse(abs(cov / dim(data)[1]) < lambda, 0,
cov / var - sign(cov) * lambda )
}
b
}
lasso(mc[[1]], 20)
lasso(sdata(mc[[1]]), 20)
lasso(sdata(mc[[1]]), .65)
lasso(sdata(mc[[1]]), 1)
lasso(sdata(mc[[1]]), .01)
bols <- sapply(mc, function(x){ols(x, p)[1:2]})
library(MASS)
bols <- sapply(mc, function(x){ols(x, p)[1:2]})
View(bols)
blasso <- sapply(mc, function(x){lasso(x, 20)})
View(blasso)
covt <- function(data, k, b = rep(0, p)) {
ytilde <- data[, 1] - data[, -c(1, k + 1)] %*% b[-k]
ytilde[, 1] %*% data[, k + 1] / dim(data)[1]
}
covtilde <- covt(sdata(mc[[s]]), ind)
lmax <- max(abs(covtilde))
coefs_1f <- apply(coefs_1f, 2, function(x){lasso(mc[[s]], x[1] * lmax)[[1]]})
View(coefs_1f)
plot(0, 0, xlim = c(0, 1), ylim = c(-1, 1), type = 'n',
xlab = expression(lambda), ylab = expression(hat(beta)))
cl <- rainbow(5)
for (i in 1:5) {
lines(grid, coefs_if[i, ], col = cl[i])
}
legend("topright", legend = 1:5, col=cl, pch=1)
plot(0, 0, xlim = c(0, 1), ylim = c(-1, 1), type = 'n',
xlab = expression(lambda), ylab = expression(hat(beta)))
cl <- rainbow(5)
for (i in 1:5) {
lines(grid, coefs_1f[i, ], col = cl[i])
}
legend("topright", legend = 1:5, col=cl, pch=1)
bridge <- sapply(mc, function(x){ridge(x, 20)})
View(bridge)
mean(d)
comp[, 1] <- apply(bols, 1, mean)
View(comp)
blasso[[1]][1]
blasso[[1]]
blasso[, 1]
blasso[1, 1]
blasso[2, 1]
blasso[1, ]
blasso[1, ][1]
bl <- do.call(cbind, blasso[1, ])
View(bl)
comp[, 2] <- apply(do.call(cbind, blasso[1, ]), 1, mean)[1:2]
View(comp)
apply(do.call(cbind, blasso[1, ]), 1, mean)[1:2]
comp[, 3] <- apply(bridge[1:2, ], 1, mean)
View(comp)
length(ind)
min(2, 5)
T <- 200
no <- T + 1
eta <- rnorm(no)
T <- 200
no <- T + 1
nr <- 50
eta <- rnorm(no)
epsilon <- matrix(rnorm(T * nr), T, nr)
rho <- .9
sigma <- diag(nr) * (1 - rho ^ 2)
epsilon <- epsilon %*% chol(sigma)
rho <- .9
sigma <- diag(nr) * (1 - rho ^ 2)
eta <- rnorm(no)
epsilon <- matrix(rnorm(no * nr), no, nr)
epsilon[-no, ] <- epsilon[-no, ] %*% chol(sigma)
View(epsilon)
X <- matrix(0, no, nr)
X <- epsilon
for (i in 1:(no - 1)) {
X[no - i, ] <- rho * X[no - i + 1, ] + X[no - i, ]
}
View(X)
beta <- c(5, rep(0, nr - 1))
Y <- X %*% beta + eta
View(Y)
y <- c(2, 6)
d %*% y
prod <- d %*% y
prod + y
dataset <- cbind(Y, X)
View(dataset)
mspe <- function(data, lambda, tau = c(100, 10), h = 1) {
Y <- data[, 1]
X <- data[, -1]
B <- dim(data)[1] - 1 - tau[1] - h + 1 # the length of Yhat
Yhat = c() # in the end will be of length B
i <- 0
while (length(Yhat) < B) {
start1 <- 1 + i * tau[2]
start2 <- tau[1] + 1 + i * tau[2]
xt <- data[start1:(start1 + tau[1] - 1), -1] # should never face the problem of the right bound exceeding T + 1, right?
ytph <- data[(start1 + h):(start1 + h + tau[1] - 1), 1]
d <- cbind(ytph, d)
bl <- lasso(d, lambda)[[1]]
rb <- min(dim(data)[1], start2 + tau[2] - 1)
yh <- data[start2:rb, -1] %&% bl
Yhat <- c(Yhat, yh)
}
mean( (Y[(length(Y) - B + 1):length(Y)] - Yhat)^2 )
}
mspe(dataset, 5)
mspe <- function(data, lambda, tau = c(100, 10), h = 1) {
Y <- data[, 1]
X <- data[, -1]
B <- dim(data)[1] - 1 - tau[1] - h + 1 # the length of Yhat
Yhat = c() # in the end will be of length B
i <- 0
while (length(Yhat) < B) {
start1 <- 1 + i * tau[2]
start2 <- tau[1] + 1 + i * tau[2]
xt <- data[start1:(start1 + tau[1] - 1), -1] # should never face the problem of the right bound exceeding T + 1, right?
ytph <- data[(start1 + h):(start1 + h + tau[1] - 1), 1]
d <- cbind(ytph, d)
bl <- lasso(d, lambda)[[1]]
rb <- min(dim(data)[1] - h, start2 + tau[2] - 1)
yh <- data[start2:rb, -1] %&% bl
Yhat <- c(Yhat, yh)
i <- i + 1
}
mean( (Y[(length(Y) - B + 1):length(Y)] - Yhat)^2 )
}
mspe(dataset, 5)
lasso <- function(data, lambda, b_initial = rep(0, p),
eps = 1e-06, max = 1000) {
# standardise
data <- sdata(data)
b <- matrix(b_initial, nrow = 2, ncol = length(b_initial), byrow = TRUE)
o <- c()
crit <- 0
i <- 1
while (i <= max) {
i <- i + 1
b[2, ] <- b[1, ]
b[1, ] <- lasso.update(b[2, ], data, lambda)
o <- c(o, lasso.objective(b[1, ], data, lambda))
if (max(abs(b[1, ] - b[2, ])) < eps) {
crit = 1
break
}
}
ans <- list(b[1, ], o,
ifelse(crit, 'eps', 'max'))
return(ans)
}
mspe <- function(data, lambda, tau = c(100, 10), h = 1) {
Y <- data[, 1]
X <- data[, -1]
B <- dim(data)[1] - 1 - tau[1] - h + 1 # the length of Yhat
Yhat = c() # in the end will be of length B
i <- 0
while (length(Yhat) < B) {
start1 <- 1 + i * tau[2]
start2 <- tau[1] + 1 + i * tau[2]
xt <- data[start1:(start1 + tau[1] - 1), -1] # should never face the problem of the right bound exceeding T + 1, right?
ytph <- data[(start1 + h):(start1 + h + tau[1] - 1), 1]
d <- cbind(ytph, d)
bl <- lasso(d, lambda, b_initial = rep(0, dim(xt)[2]))[[1]]
rb <- min(dim(data)[1] - h, start2 + tau[2] - 1)
yh <- data[start2:rb, -1] %&% bl
Yhat <- c(Yhat, yh)
i <- i + 1
}
mean( (Y[(length(Y) - B + 1):length(Y)] - Yhat)^2 )
}
mspe(dataset, 5)
mspe <- function(data, lambda, tau = c(100, 10), h = 1) {
Y <- data[, 1]
X <- data[, -1]
B <- dim(data)[1] - 1 - tau[1] - h + 1 # the length of Yhat
Yhat = c() # in the end will be of length B
i <- 0
while (length(Yhat) < B) {
start1 <- 1 + i * tau[2]
start2 <- tau[1] + 1 + i * tau[2]
xt <- data[start1:(start1 + tau[1] - 1), -1] # should never face the problem of the right bound exceeding T + 1, right?
ytph <- data[(start1 + h):(start1 + h + tau[1] - 1), 1]
d <- cbind(ytph, xt)
bl <- lasso(d, lambda, b_initial = rep(0, dim(xt)[2]))[[1]]
rb <- min(dim(data)[1] - h, start2 + tau[2] - 1)
yh <- data[start2:rb, -1] %&% bl
Yhat <- c(Yhat, yh)
i <- i + 1
}
mean( (Y[(length(Y) - B + 1):length(Y)] - Yhat)^2 )
}
mspe(dataset, 5)
mspe <- function(data, lambda, tau = c(100, 10), h = 1) {
Y <- data[, 1]
X <- data[, -1]
B <- dim(data)[1] - 1 - tau[1] - h + 1 # the length of Yhat
Yhat = c() # in the end will be of length B
i <- 0
while (length(Yhat) < B) {
start1 <- 1 + i * tau[2]
start2 <- tau[1] + 1 + i * tau[2]
xt <- data[start1:(start1 + tau[1] - 1), -1] # should never face the problem of the right bound exceeding T + 1, right?
ytph <- data[(start1 + h):(start1 + h + tau[1] - 1), 1]
d <- cbind(ytph, xt)
bl <- lasso(d, lambda, b_initial = rep(0, dim(xt)[2]))[[1]]
rb <- min(dim(data)[1] - h, start2 + tau[2] - 1)
yh <- data[start2:rb, -1] %*% bl
Yhat <- c(Yhat, yh)
i <- i + 1
}
mean( (Y[(length(Y) - B + 1):length(Y)] - Yhat)^2 )
}
mspe(dataset, 5)
lambdas <- seq(.5, 8, length.out = 20)
cross.validation <- function(data, lambda_seq, tau = c(100, 10), h = 1) {
apply(lambda_seq, function(x){mspe(data, x, tau, h)})
}
cross.validation(dataset, lambdas)
cross.validation <- function(data, lambda_seq, tau = c(100, 10), h = 1) {
apply(lambda_seq, 1, function(x){mspe(data, x, tau, h)})
}
cross.validation(dataset, lambdas)
cross.validation <- function(data, lambda_seq, tau = c(100, 10), h = 1) {
mspe(data, lambda_seq, tau, h)
}
cross.validation(dataset, lambdas)
sapply(y, x)
sapply(y, mean)
cross.validation <- function(data, lambda_seq, tau = c(100, 10), h = 1) {
sapply(lambda_seq, function(x) {mspe(data, x, tau, h)})
}
cross.validation(dataset, lambdas)
mc2 <- vector('list', N2)
N2 <- 100 # the number of samples
mc2 <- vector('list', N2)
s2 <- function(T, nr, N, rho, beta) {
sigma <- diag(nr) * (1 - rho ^ 2)
eta <- rnorm(no)
epsilon <- matrix(rnorm(no * nr), no, nr)
epsilon[-no, ] <- epsilon[-no, ] %*% chol(sigma)
X <- epsilon
for (i in 1:(no - 1)) {
X[no - i, ] <- rho * X[no - i + 1, ] + X[no - i, ]
}
Y <- X %*% beta + eta
cbind(Y, X)
}
mc2 <- sapply(mc2, function(x) {s2(T, nr, N2, rho, beta)})
s2 <- function(T, nr, rho, beta) {
sigma <- diag(nr) * (1 - rho ^ 2)
eta <- rnorm(no)
epsilon <- matrix(rnorm(no * nr), no, nr)
epsilon[-no, ] <- epsilon[-no, ] %*% chol(sigma)
X <- epsilon
for (i in 1:(no - 1)) {
X[no - i, ] <- rho * X[no - i + 1, ] + X[no - i, ]
}
Y <- X %*% beta + eta
cbind(Y, X)
}
mc2 <- vector('list', N2)
mc2 <- sapply(mc2, function(x) {s2(T, nr, rho, beta)})
s2 <- function(T, nr, rho, beta) {
sigma <- diag(nr) * (1 - rho ^ 2)
no <- T + 1
eta <- rnorm(no)
epsilon <- matrix(rnorm(no * nr), no, nr)
epsilon[-no, ] <- epsilon[-no, ] %*% chol(sigma)
X <- epsilon
for (i in 1:(no - 1)) {
X[no - i, ] <- rho * X[no - i + 1, ] + X[no - i, ]
}
Y <- X %*% beta + eta
cbind(Y, X)
}
mc2 <- vector('list', N2)
mc2 <- sapply(mc2, function(x) {s2(T, nr, rho, beta)})
mc2 <- vector('list', N2)
mc2 <- lapply(mc2, function(x) {s2(T, nr, rho, beta)})
mspe_seq <- matrix(0, length(lambdas), N2)
mspe_seq <- apply(mspe_seq, 2, function(x) {cross.validation(x, lambdas)})
mspe_seq <- sapply(mc2, function(x) {cross.validation(x, lambdas)})
mspe_seq <- sapply(mc2, function(x) {cross.validation(x, lambdas)})
2
2 + 2
View(mspe_seq)
rm(mspe_seq)
mspe_seq <- sapply(mc2, function(x) {cross.validation(x, lambdas)})
View(mspe_seq)
lambdas <- seq(.1, 3, length.out = 20)
mspe_seq <- sapply(mc2, function(x) {cross.validation(x, lambdas)})
View(mspe_seq)
av_mspe <- apply(mspe_seq, 1, mean)
2
av_mspe <- apply(mspe_seq, 1, mean)
plot(lambdas, av_mspe)
lambdas <- seq(.01, 1, length.out = 20)
mspe_seq <- sapply(mc2, function(x) {cross.validation(x, lambdas)})
View(mspe_seq)
mspe_seq <- sapply(mc2[[1]], function(x) {cross.validation(x, lambdas)})
mspe_seq <- sapply(mc2[[1]], function(x) {cross.validation(x, lambdas)})
mspe_seq <- sapply(mc2[1:2], function(x) {cross.validation(x, lambdas)})
mspe(mc2[[1]]. 2)
mspe(mc2[[1]], 2)
cross.validation(mc2[[1]], lambdas)
mc[1:2]
b <- mc[1:2]
b <- mc2[1:2]
mspe_seq <- sapply(mc2[1:2], function(x) {cross.validation(x, lambdas)})
View(mspe_seq)
lambdas <- seq(.01, 1.5, length.out = 20)
mspe_seq <- sapply(mc2[1:2], function(x) {cross.validation(x, lambdas)})
N2 <- 20 # the number of samples
mc2 <- vector('list', N2)
mc2 <- lapply(mc2, function(x) {s2(T, nr, rho, beta)})
mspe_seq <- sapply(mc2, function(x) {cross.validation(x, lambdas)})
View(mspe_seq)
av_mspe <- apply(mspe_seq, 1, mean)
plot(lambdas, av_mspe)
plot(lambdas, av_mspe, ylim = c(0, 13))
plot(lambdas, av_mspe, ylim = c(6.5, 13))
plot(lambdas, av_mspe, ylim = c(8, 13))
plot(lambdas, av_mspe, ylim = c(8, 12))
plot(lambdas, av_mspe, ylim = c(8, 12),
xlab = expression(lambda), ylab = expression(MSPE))
plot(lambdas, av_mspe, ylim = c(8, 12),
xlab = expression(lambda), ylab = expression(bar(MSPE)))
which.min(av_mspe)
lambda_cv <- lambdas[which.min(av_mspe)]
rev(ind)
mspe <- function(data, lambda, tau = c(100, 10), h = 1) {
# i'm reversing the order of observations bc i rely later on
# the last obs (row) being the earliest period
Y <- data[nrow(data):1, 1]
X <- data[nrow(data):1, -1]
B <- dim(data)[1] - 1 - tau[1] - h + 1 # the length of Yhat
Yhat = c() # in the end will be of length B
i <- 0
while (length(Yhat) < B) {
start1 <- 1 + i * tau[2]
start2 <- tau[1] + 1 + i * tau[2]
xt <- X[start1:(start1 + tau[1] - 1), ] # should never face the problem of the right bound exceeding T + 1, right?
ytph <- Y[(start1 + h):(start1 + h + tau[1] - 1)]
d <- cbind(ytph, xt)
bl <- lasso(d, lambda, b_initial = rep(0, dim(xt)[2]))[[1]]
rb <- min(dim(data)[1] - h, start2 + tau[2] - 1)
yh <- X[start2:rb, ] %*% bl
Yhat <- c(Yhat, yh)
i <- i + 1
}
mean( (Y[(length(Y) - B + 1):length(Y)] - Yhat)^2 )
}
mspe_seq <- sapply(mc2, function(x) {cross.validation(x, lambdas)})
View(mspe_seq)
av_mspe <- apply(mspe_seq, 1, mean)
plot(lambdas, av_mspe, ylim = c(8, 12),
xlab = expression(lambda), ylab = expression(bar(MSPE)))
plot(lambdas, av_mspe, ylim = c(7, 12),
xlab = expression(lambda), ylab = expression(bar(MSPE)))
plot(lambdas, av_mspe, ylim = c(7.8, 12),
xlab = expression(lambda), ylab = expression(bar(MSPE)))
lambda_cv <- lambdas[which.min(av_mspe)]
lasso.forecast <- function(data, lambda, h = 1) {
yth <- data[(nrow(data) - h):1, 1]
xt <- data[nrow(data):(1 + h), -1]
d <- cbind(yth, xt)
lasso(d, lambda, b_initial = rep(0, ncol(xt)))[[1]]
}
lasso.forecast(mc2[[1]], lambda_cv)
end_lasso <- sapply(mc2, function(x) {lasso.forecast(x, lambda_cv)})
View(end_lasso)
table_2b <- apply(end_lasso, 1, mean)
table_wb
table_2b
tilde_sigma <- matrix(.8 * (1 - rho ^ 2), 10, 10)
diag(tilde_sigma) <- (1 - rho ^ 2)
sigma_c <- kronecker(diag(5), tilde_sigma)
View(sigma_c)
mc2c <- vector('list', N2)
s2 <- function(T, nr, sigma, beta) {
sigma_0 <- sigma * (1 - rho ^ 2) ^ (-1)
no <- T + 1
eta <- rnorm(no)
epsilon <- matrix(rnorm(no * nr), no, nr)
# THE LAST ROW IS THE FIRST PERIOD DON'T ASK WHY
epsilon[-no, ] <- epsilon[-no, ] %*% chol(sigma)
epsilon[no, ] <- epsilon[no, ] %*% chol(sigma_0)
X <- epsilon
for (i in 1:(no - 1)) {
X[no - i, ] <- rho * X[no - i + 1, ] + X[no - i, ]
}
Y <- X %*% beta + eta
cbind(Y, X)
}
mc2c <- lapply(mc2c, function(x) {s2(T, nr, sigma_c, beta)})
View(mc2c)
mspe_seq_c <- sapply(mc2c, function(x) {cross.validation(x, lambdas)})
View(mspe_seq_c)
av_mspe_c <- apply(mspe_seq_c, 1, mean)
plot(lambdas, av_mspe_c, ylim = c(7.8, 12),
xlab = expression(lambda), ylab = expression(bar(MSPE)))
plot(lambdas, av_mspe_c, ylim = c(7.8, 11),
xlab = expression(lambda), ylab = expression(bar(MSPE)))
lambda_cv_c <- lambdas[which.min(av_mspe_c)]
end_lasso_c <- sapply(mc2c, function(x) {lasso.forecast(x, lambda_cv_c)})
table_2c <- apply(end_lasso_c, 1, mean)
ind == 1
View(blasso)
blasso[1]
blasso[[1]]
blasso[[2]]
blasso <- lapply(mc, function(x){lasso(x, 20)})
lasso.objective <- function(b, data, lambda) {
.5 * (1 / nrow(data)) * sum((data[, 1] - data[, -1] %*% b) ^ 2) + lambda * sum(abs(b))
}
lasso.objective <- function(b, data, lambda) {
.5 * (1 / nrow(data)) * sum((data[, 1] - data[, -1] %*% b) ^ 2) +
lambda * sum(abs(b))
}
blasso[[1]]
blasso[[1]][1]
2 in c(2, 3)
2 %in% c(2, 3)
sapply(blasso, function(x) {TRUE %in% (x[1] != 0)})
blasso[[1]][1] != 0
blasso[[1]][[1]]
blasso[[1]][[1]] != 0
sapply(blasso, function(x) {TRUE %in% (x[[1]] != 0)})
zero <- sapply(blasso, function(x) {TRUE %in% (x[[1]] != 0)})
print(paste('are there non-zero coefs?', TRUE %in% zero))
print(paste('how many times do we get non-zero coefs?', sum(zero)))
save(bols, blasso, bridge, comp, grid, coefs_1f, lambda, av_mspe,
av_mspe_c, table_2b, table_2c,
file = 'output.RData')
save(bols, blasso, bridge, comp, grid, coefs_1f, lambdas, av_mspe,
av_mspe_c, table_2b, table_2c,
file = 'output.RData')
