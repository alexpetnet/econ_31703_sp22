cl <- rep(NA, K)
for (i in 1:K) {
Xk <- X[clustering == i, , drop = FALSE]
m <- apply(Xk, 2, mean)
Xkd <- apply(Xk, 1, function(x) {sum( (x - m)^2 )})
cl[i] <- sum(Xkd)
}
sum(cl)
}
kmeans.objective(2, c, c(1, 2, 1))
kmeans(2, c, c(1, 1, 2))
c[3, , drop = FALSE]
kmeans.objective(2, c, c(1, 1, 2))
kmeans <- function(K, data, initial.clustering, max = 1000, eps = 1e-6) {
means <- array(0, dim = c(K, ncol(data[, -1]), 2))
means[ , , 2] <- kmeans.mean.update(K, data, initial.clustering)
obj <- kmeans.objective(K, data, initial.clustering)
iter <- 1
while((iter <= max) & (means.update(means) > eps)) {
iter <- iter + 1
stop <- 0 # change to 1 only if max iterations is hit
means[ , , 1] <- means[ , , 2]
cluster <- kmeans.clustering.update(K, data, means[ , , 2])
means[ , , 2] <- kmeans.mean.update(K, data, cluster)
for (j in 1:K) {
if (NaN %in% means[j, , 2]) {
means[j, , 2] <- means[j, , 1]
}
}
obj <- c(obj, kmeans.objective(K, data, cluster))
if (iter == max) {
stop <- 1
}
}
ans <- list(clustering = cluster,
means = means[ , , 2],
objective = obj,
status = stop)
ans
}
kmeans.objective(2, c, c(1, 1, 2))
kmeans(2, c, c(1, 1, 2))
kmeans.mean.update <- function(K, data, clustering) {
X <- data[, -1]
p <- ncol(X)
M <- matrix(NA, K, p)
for (i in 1:K) {
Xk <- X[clustering == i, , drop = FALSE]
M[i, ] <- apply(Xk, 2, mean)
}
M
}
kmeans(2, c, c(1, 1, 2))
kmeans(2, c, c(2, 1, 2))
m <- matrix(c(4.5, 6, 7.5, 9), 2)
choose.cluster(c[3, -1], m)
apply(m, 1, function(x) {x - c[3, -1]})
m[1, ]
m[1, ] - c[3, -1]
m[2, ] - c[3, -1]
apply(m, 1, function(x) {x})
choose.cluster <- function(X, means) {
diff <- t(apply(means, 1, function(x) {x - X}))
norm <- apply(diff, 1, function(x) {sum(x ^ 2)})
which.min(norm)
}
t(apply(m, 1, function(x) {x - c[3, -1]}))
choose.cluster(c[3, -1], m)
kmeans(2, c, c(1, 1, 2))
kmeans(2, c, c(2, 1, 2))
?Uniform
u <- runif(200)
rep(1, N) + (u >= .2) + (u >= .5)
rep(1, 200) + (u >= .2) + (u >= .5)
eye()
eye(3)
diag(3)
?diag
array(diag(3), dim = c(3, 3, 3))
s <- array(diag(3), dim = c(3, 3, 3))
chol(s)
apply(s, 3, chol)
?apply
apply(s, 3, chol, simplify = FALSE)
ch <- apply(s, 3, chol, simplify = FALSE)
as.matrix(ch)
rep(diag(3))
rep(diag(3), 2)
list(diag(3))
?list
rep(list(2), 2)
rep(list(diag(3)), 2)
s <- rep(list(diag(3)), 3)
chol(s)
lapply(s, chol)
t <- rep(1, 10) + (u >= .2) + (u >= .5)
t
t <- rep(1, 10) + (u >= .2) + (u >= .5)
t <- rep(1, 200) + (u >= .2) + (u >= .5)
t
apply(t, function(x) {rnorm(3, mean = x) })
apply(t, 1, function(x) {rnorm(3, mean = x) })
rnorm(2, mean = t)
t[, ]
sam <- matrix(NA, 200, 3)
sam <- matrix(t, 200, 3)
View(sam)
matrx(t)
matrix(t)
apply(matrix(t), 1, function(x) {rnorm(3, mean = x) })
sample <- function(p = 2, N = 200,
mu = matrix(0, p + 1, 3),
sigma = rep( list( diag(p + 1) ), 3) ) {
u <- runif(N)
theta <- rep(1, N) + (u >= .2) + (u >= .5)
s.chol <- lapply(sigma, chol)
apply(matrix(theta), 1, function(x) {mu[ , x] + s.chol[[x]] %*% rnorm(p + 1)})
}
sam <- sample()
View(sam)
sample <- function(p = 2, N = 200,
mu = matrix(0, p + 1, 3),
sigma = rep( list( diag(p + 1) ), 3) ) {
u <- runif(N)
theta <- rep(1, N) + (u >= .2) + (u >= .5)
s.chol <- lapply(sigma, chol)
t( apply(matrix(theta), 1, function(x) {mu[ , x] +
s.chol[[x]] %*% rnorm(p + 1)}) )
}
sam <- sample()
View(sam)
mu <- matrix(c(0, 0, 0, 2, 1, 0, 1, 0, 1), 3)
View(l)
diag(c(1, 2, 3))
s <- matrix(.1, 3) + diag(c(.9, .1, .1))
s <- matrix(.1, 3, 3) + diag(c(.9, .1, .1))
View(s)
s <- rep( list( matrix(.1, 3, 3) + diag(c(.9, .1, .1)) ), 3 )
sample(mu = mu, sigma = s)
sample.mc <- sample(mu = mu, sigma = s)
View(sample.mc)
sample <- function(p = 2, N = 200,
mu = matrix(0, p + 1, 3),
sigma = rep( list( diag(p + 1) ), 3) ) {
u <- runif(N)
theta <- rep(1, N) + (u >= .2) + (u >= .5)
s.chol <- lapply(sigma, chol)
s <- t( apply(matrix(theta), 1, function(x) {mu[ , x] +
s.chol[[x]] %*% rnorm(p + 1)}) )
matrix(c(s, theta), 200, p + 2)
}
sample.mc <- sample(mu = mu, sigma = s)
View(sample.mc)
plot(sample.mc[, -c(1, 4)])
?plot
cl <- rainbow(3)
cl[sample.mc[, 4]]
plot(sample.mc[ , -c(1, 4)], col = cl[mc[ , 4]])
plot(sample.mc[ , -c(1, 4)], col = cl[sample.mc[ , 4]])
plot(sample.mc[ , -c(1, 4)], col = cl[sample.mc[ , 4]],
xlab = expression(X_1))
?expression
plot(sample.mc[ , -c(1, 4)], col = cl[sample.mc[ , 4]],
xlab = expression(X[1]))
plot(sample.mc[ , -c(1, 4)], col = cl[sample.mc[ , 4]],
xlab = expression(X[1]), ylab = expression(X[2]))
pdf('true_clustering.pdf')
cl <- rainbow(3)
plot(sample.mc[ , -c(1, 4)], col = cl[sample.mc[ , 4]],
xlab = expression(X[1]), ylab = expression(X[2]))
dev.off()
plot(sample.mc[ , -c(1, 4)], col = cl[sample.mc[ , 4]],
xlab = expression(X[1]), ylab = expression(X[2]))
legend("topright", legend = 1:3, col=cl, pch=1)
plot(sample.mc[ , -c(1, 4)], col = cl[sample.mc[ , 4]],
xlab = expression(X[1]), ylab = expression(X[2]))
legend("topright", legend = c( expression(theta[1], theta[2], tehta[3]) ),
col=cl, pch=1)
pdf('true_clustering.pdf')
cl <- rainbow(3)
plot(sample.mc[ , -c(1, 4)], col = cl[sample.mc[ , 4]],
xlab = expression(X[1]), ylab = expression(X[2]))
legend("topright", legend = c( expression(theta[1], theta[2], theta[3]) ),
col=cl, pch=1)
dev.off()
kmeans(3, sample.mc[ , -4], rep(1, 200))
kmeans(3, sample.mc[ , -4], rep(c(1, 2, 3), 200))
rep(1:3, 200)
kmeans.clustering.update(3, sample.mc[,])
kmeans.clustering.update(3, sample.mc[ , -4], matrix(1:9, 3, 3))
warnings()
kmeans.clustering.update(3, sample.mc[ , -4], matrix(1:6, 3, 2))
kmeans(3, sample.mc[ , -4], rep(c(1, 2, 3), 200))
kmeans <- function(K, data, initial.clustering, max = 1000, eps = 1e-6) {
means <- array(0, dim = c(K, ncol(data[, -1]), 2))
means[ , , 2] <- kmeans.mean.update(K, data, initial.clustering)
obj <- kmeans.objective(K, data, initial.clustering)
iter <- 1
while((iter <= max) & (means.update(means) > eps)) {
iter <- iter + 1
stop <- 0 # change to 1 only if max iterations is hit
means[ , , 1] <- means[ , , 2]
cluster <- kmeans.clustering.update(K, data, means[ , , 2])
print(length(cluster))
means[ , , 2] <- kmeans.mean.update(K, data, cluster)
for (j in 1:K) {
if (NaN %in% means[j, , 2]) {
means[j, , 2] <- means[j, , 1]
}
}
obj <- c(obj, kmeans.objective(K, data, cluster))
if (iter == max) {
stop <- 1
}
}
ans <- list(clustering = cluster,
means = means[ , , 2],
objective = obj,
status = stop)
ans
}
kmeans(3, sample.mc[ , -4], rep(c(1, 2, 3), 200))
rep(1:3, 200)
seq(1:3, 200)
seq(1, 3, 200)
?seq
seq(1, 3, length.out = 200)
sample(3, 2000)
sample(3, 200)
sample.mc <- function(p = 2, N = 200,
mu = matrix(0, p + 1, 3),
sigma = rep( list( diag(p + 1) ), 3) ) {
u <- runif(N)
theta <- rep(1, N) + (u >= .2) + (u >= .5)
s.chol <- lapply(sigma, chol)
s <- t( apply(matrix(theta), 1, function(x) {mu[ , x] +
s.chol[[x]] %*% rnorm(p + 1)}) )
matrix(c(s, theta), 200, p + 2)
}
sample(3, 200)
rm(sample)
sample(3, 200)
sample(3, 200, replace = TRUE)
kmeans(3, sample.mc[ , -4], sample(3, 200, replace = TRUE))
d <- sample.mc(mu = mu, sigma = s)
kmeans(3, d[ , -4], sample(3, 200, replace = TRUE))
kmeans <- function(K, data, initial.clustering, max = 1000, eps = 1e-6) {
means <- array(0, dim = c(K, ncol(data[, -1]), 2))
means[ , , 2] <- kmeans.mean.update(K, data, initial.clustering)
obj <- kmeans.objective(K, data, initial.clustering)
iter <- 1
while((iter <= max) & (means.update(means) > eps)) {
iter <- iter + 1
stop <- 0 # change to 1 only if max iterations is hit
means[ , , 1] <- means[ , , 2]
cluster <- kmeans.clustering.update(K, data, means[ , , 2])
means[ , , 2] <- kmeans.mean.update(K, data, cluster)
for (j in 1:K) {
if (NaN %in% means[j, , 2]) {
means[j, , 2] <- means[j, , 1]
}
}
obj <- c(obj, kmeans.objective(K, data, cluster))
if (iter == max) {
stop <- 1
}
}
ans <- list(clustering = cluster,
means = means[ , , 2],
objective = obj,
status = stop)
ans
}
kmeans(3, d[ , -4], sample(3, 200, replace = TRUE))
r <- rep(list(NA), 10)
r <- lapply(r, function(x) {kmeans(3, d[ , -4], sample(3, 200, replace = TRUE))})
r[[1]]
r[[]]$objective
r[[1]]$objective
r[[1:10]]$objective
r[[c(1, 2)]]$objective
r[[c(1, 2)]]
r[1]
r[[1]]
r[1:2]
r[1:2]$objective
r$objective
r.o <- lapply(r, function(x) {x$objetctive[length(x$objective)]})
r.o <- lapply(r, function(x) {x$objetctive})
r.o <- lapply(r, function(x) {x$objective})
r.o <- lapply(r, function(x) {x$objective[length(x$objective)]})
r.o <- sapply(r, function(x) {x$objective[length(x$objective)]})
which.min(r.o)
expression(theta[b])
apply(matrix(b, 2, 1), 1, function(x) {expression(theta[x])})
parse(1)
parse(text = '1')
parse(text = theta[1])
parse(text = 'theta[1]')
apply(matrix(b, 2, 1), 1, function(x) {parse( text = 'theta[x]')})
apply(matrix(b, 2, 1), 1, function(x) {parse( text = 'theta[' + as.text(x) + ']')})
as.text(1)
text(1)
string(1)
as.string(1)
as.character(2)
apply(matrix(b, 2, 1), 1, function(x) {parse( text = 'theta[' + as.character(x) + ']')})
apply(matrix(b, 2, 1), 1, function(x) {parse( text = paste('theta[', as.character(x), ']'))})
apply(matrix(b, 2, 1), 1, function(x) {parse( text = paste0('theta[', as.character(x), ']'))})
sapply(matrix(b, 2, 1), 1, function(x) {parse( text = paste0('theta[', as.character(x), ']'))})
c(apply(matrix(b, 2, 1), 1, function(x) {parse( text = paste0('theta[', as.character(x), ']'))}))
plot.cluster <- function(K, data, cluster, name) {
X <- data[ , -1]
pdf(name)
cl <- rainbow(K)
plot(X, col = cl[cluster],
xlab = expression(X[1]), ylab = expression(X[2]))
l <- apply(matrix(b, 2, 1), 1, function(x)
{parse( text = paste0('theta[', as.character(x), ']'))})
legend("topright", legend = l,
col=cl, pch=1)
dev.off()
}
View(d)
kmeans(3, d[ , -4], sample(3, 200, replace = TRUE))
r.o
which.min(r.o)
plot.cluster(3, d[ , -4], r[[7]]$clustering, 'best_k_means.pdf')
n.mc <- 1000
samples <- rep(list(), n.mc)
View(samples)
samples <- rep(list(NA), n.mc)
samples <- lapply(samples, function(x) {sample.mc(mu = mu, sigma = s)})
View(samples)
as.list(1:3)
# a function that returns a list of estimation outcomes given k's to try
k.trial <- function(d, k.tilde = 2:5) {
o <- as.list(k.tilde)
lapply(o, function(x) {kmeans(x, d, sample(x, 200, replace = TRUE))})
}
k.trial(d[ , -4])
mu[1, d[ , 4]]
?which
1:4[2:5 == 5]
1:4[2]
b[2:3 == 2]
b[b == 2]
k.tilde.cluster <- function(d, kt, mu) {
r <- kmeans(kt, d, sample(kt, 200, replace = TRUE))
d[ , ncol(d) + 1] <- mu[1, d[ , 4]]
m <- kmeans.mean.update(kt, d[ , 4:5], r$clustering)
d[ , ncol(d) + 2] <- m[r$clustering]
d
}
k.tilde.cluster(d, 2, mu)
k.tilde.cluster(d, 2, mu)
k.tilde.cluster <- function(d, kt, mu) {
r <- kmeans(kt, d, sample(kt, 200, replace = TRUE))
d[ , ncol(d) + 1] <- mu[1, ][d[ , 4]]
m <- kmeans.mean.update(kt, d[ , 4:5], r$clustering)
d[ , ncol(d) + 2] <- m[r$clustering]
d
}
k.tilde.cluster(d, 2, mu)
mu[1, ]
View(d)
mu[1, ][d[, 4]]
d[, ncol(d) + 1] <- 1
d[, ncol(d) + 1] <- rep(1, 200)
k.tilde.cluster <- function(d, kt, mu) {
r <- kmeans(kt, d, sample(kt, 200, replace = TRUE))
d <- cbind( d, mu[1, ][d[ , 4]] )
m <- kmeans.mean.update(kt, d[ , 4:5], r$clustering)
d <- cbind( d, m[r$clustering] )
d
}
k.tilde.cluster(d, 2, mu)
kmeans.mean.update <- function(K, data, clustering) {
X <- data[, -1]
p <- ncol(X)
print(p)
M <- matrix(NA, K, p)
for (i in 1:K) {
Xk <- X[clustering == i, , drop = FALSE]
M[i, ] <- apply(Xk, 2, mean)
}
M
}
k.tilde.cluster(d, 2, mu)
kmeans.mean.update(2, d[ , 1:2], sample(2, 200, replace = TRUE))
matrix
matrix(matrix)
kmeans.mean.update <- function(K, data, clustering) {
X <- data[, -1]
p <- ncol(X) + (ncol(X) == NULL)
print(p)
M <- matrix(NA, K, p)
for (i in 1:K) {
Xk <- X[clustering == i, , drop = FALSE]
M[i, ] <- apply(Xk, 2, mean)
}
M
}
kmeans.mean.update(2, d[ , 1:2], sample(2, 200, replace = TRUE))
kmeans.mean.update <- function(K, data, clustering) {
X <- data[, -1]
p <- ncol(X)
if (p == NULL) {
p <- 1
}
print(p)
M <- matrix(NA, K, p)
for (i in 1:K) {
Xk <- X[clustering == i, , drop = FALSE]
M[i, ] <- apply(Xk, 2, mean)
}
M
}
kmeans.mean.update(2, d[ , 1:2], sample(2, 200, replace = TRUE))
kmeans.mean.update <- function(K, data, clustering) {
X <- data[, -1]
p <- ncol(X)
if (is.null(p)) {
p <- 1
}
print(p)
M <- matrix(NA, K, p)
for (i in 1:K) {
Xk <- X[clustering == i, , drop = FALSE]
M[i, ] <- apply(Xk, 2, mean)
}
M
}
kmeans.mean.update(2, d[ , 1:2], sample(2, 200, replace = TRUE))
kmeans.mean.update <- function(K, data, clustering) {
X <- data[, -1, drop = FALSE]
p <- ncol(X)
print(p)
M <- matrix(NA, K, p)
for (i in 1:K) {
Xk <- X[clustering == i, , drop = FALSE]
M[i, ] <- apply(Xk, 2, mean)
}
M
}
kmeans.mean.update(2, d[ , 1:2], sample(2, 200, replace = TRUE))
kmeans.mean.update <- function(K, data, clustering) {
X <- data[, -1, drop = FALSE]
p <- ncol(X)
M <- matrix(NA, K, p)
for (i in 1:K) {
Xk <- X[clustering == i, , drop = FALSE]
M[i, ] <- apply(Xk, 2, mean)
}
M
}
k.tilde.cluster(d, 2, mu)
k.tilde.cluster <- function(d, kt, mu) {
r <- kmeans(kt, d, sample(kt, 200, replace = TRUE))
d <- cbind( d, mu[1, ][d[ , 4]] )
m <- kmeans.mean.update(kt, d[ , 4:5], r$clustering)
d <- cbind( d, m[r$clustering] )
bias <- mean( ( d[ , 5] - d[ , 6] ) ^ 2 )
d <- cbind( d, d[ , 1] - d[ , 5] )
v <- kmeans.mean.update(kt, d[ , 6:7], r$clustering)
d <- cbind( d, v[r$clustering] )
var <- mean(d[ , 8] ^ 2)
c(bias, var)
}
k.tilde.cluster(d, 2, mu)
# a function that returns a list of estimation outcomes given k's to try
k.trial <- function(d, k.tilde = 2:5) {
o <- as.list(k.tilde)
lapply(o, function(x) {k.tilde.cluster(d, x, mu)})
}
k.trial(d)
k.mean.var <- function(kt, mu, sam) {
sapply(sam, function(x) {k.tilde.cluster(x, kt, mu)})
}
k.mean.var(2, mu, samples)
ex.k2 <- k.mean.var(2, mu, samples)
View(ex.k2)
k.mean.var <- function(kt, mu, sam) {
t <- sapply(sam, function(x) {k.tilde.cluster(x, kt, mu)})
apply(t, 1, mean)
}
k.mean.var(2, mu, samples)
apply(matrix(b), 1, mean)
apply(matrix(b), 1, mean, simplify = FALSE)
apply(t(matrix(b)), 2, mean)
apply(t(matrix(b)), 1, mean)
apply(matrix(b), 1, function(x) {1:3})
table.f <- apply( matrix(2:5), 1, function(x) {k.mean.var(x, mu, samples)} )
View(table.f)
xtable(table.f)
library(xtable)
xtable(table.f)
?xtable
plot.cluster <- function(K, data, cluster, name) {
X <- data[ , -1]
pdf(name)
cl <- rainbow(K)
plot(X, col = cl[cluster],
xlab = expression(X[1]), ylab = expression(X[2]))
l <- apply(matrix(b), 1, function(x)
{parse( text = paste0('theta[', as.character(x), ']'))})
legend("topright", legend = 1:K,
col=cl, pch=1)
dev.off()
}
plot.cluster(3, d[ , -4], r[[7]]$clustering, 'best_k_means.pdf')
plot.cluster(3, d[ , -4], d[ , 4], 'true_clustering.pdf')
