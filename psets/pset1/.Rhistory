library('MASS')
sample_sn <- function(p, n, N, sigma) {
#X <- rmvnorm(n, rep(0, p + 1), sigma)
t <- array(rnorm(n * (p + 1) * N), dim = c(n, p + 1, N))
#c <- chol(sigma)
#s <- apply(t, 3, function(x) {x %*% c}, simplify = FALSE)
#lapply(s, function(x) {cbind(x[, 1] - x[, 2] + x[, p + 1], x[, 1:p])})
#Y <- X[, 1] - X[, 2] + X[, p + 1]
#cbind(Y, X[, 1:p])
}
# transform so that there's dependence
sample <- function(srn, sigma) {
c <- chol(sigma)
s <- apply(t, 3, function(x) {x %*% c}, simplify = FALSE)
lapply(s, function(x) {cbind(x[, 1] - x[, 2] + x[, p + 1], x[, 1:p])})
}
}
p <- 90
n <- 100
N <- 10000 # number of samples
sample_sn <- function(p, n, N) {
#X <- rmvnorm(n, rep(0, p + 1), sigma)
t <- array(rnorm(n * (p + 1) * N), dim = c(n, p + 1, N))
#c <- chol(sigma)
#s <- apply(t, 3, function(x) {x %*% c}, simplify = FALSE)
#lapply(s, function(x) {cbind(x[, 1] - x[, 2] + x[, p + 1], x[, 1:p])})
#Y <- X[, 1] - X[, 2] + X[, p + 1]
#cbind(Y, X[, 1:p])
}
rns <- sample_sn(p, n, N)
mc <- sample(rns, diag(p + 1))
dim(rns)
dim(rns)[2]
# transform so that there's dependence
sample <- function(srn, sigma) {
c <- chol(sigma)
s <- apply(srn, 3, function(x) {x %*% c}, simplify = FALSE)
lapply(s, function(x) {cbind(x[, 1] - x[, 2] + x[, dim(rns)[2]], x[, 1:dim(rns)[2] - 1])})
}
mc <- sample(rns, diag(p + 1))
p_g <- 950 # should be enough lol
N_tries <- c(100, 200, 500, 1000)
tries_e <- length(N_tries)
table_e <- array(0, dim = c(3, tries_e, 3))
N_samples <- 1000
rho_e = c(0, 0.5, 0.9)
mc_g <- vector('list', length = length(rho_e))
mc_g <- lapply(mc_g, function(x) {vector('list', length(tries_e))})
View(mc_g)
View(mc_g)
vector('list', length(tries_e))
vector('list', tries_e)
mc_g <- vector('list', length = length(rho_e))
mc_g <- lapply(mc_g, function(x) {vector('list', tries_e)})
mc_g[[1]]
mc_g[[1]][[2]]
for (i in 1:tries_e) {
srn <- sample_sn(p_g, N_tries[i], N_samples)
for (j in 1:length(rho_e)) {
sig_g <- matrix(rho_e[j], p_g + 1, p_g + 1)
sig_g[(p_g+1), ] <- rep(0, p_g + 1)
sig_g[, (p_g+1)] <- rep(0, p_g + 1)
diag(sig_g) <- rep(1, p_g + 1)
mc_g[[j]][[i]] <- sample(srn, sig_g)
}
}
View(mc_g)
View(mc_g)
ols <- function(sample, nreg) {
ginv(sample[, 2:(nreg+1)]) %*% sample[, 1]
}
ols(mc[[1]], 3)
table_g <- array(0, dim = c(6, tries_e, 3))
# a function that returns mean and variance of beta_1 and the mean lowest eigenvalue
e_func <- function(sample, p) {
beta_bols <- sapply(sample, function(x){ols(x, p)})
#beta_bols <- sapply(bols, function(x) x$coefficients[1])
eig <- sapply(sample, function(x){min(eigen(1 / dim(x)[1] * t(x[, 2:(p+1)]) %*% x[, 2:(p+1)])$values )})
return(c(mean(beta_bols), var(beta_bols), mean(eig)))
}
e_func(mc, 90)
beta_bols <- sapply(mc, function(x){ols(x, 90)})
beta_bols <- sapply(mc, function(x){ols(x, 90)}[1])
# a function that returns mean and variance of beta_1 and the mean lowest eigenvalue
e_func <- function(sample, p) {
beta_bols <- sapply(sample, function(x){ols(x, p)[1]})
#beta_bols <- sapply(bols, function(x) x$coefficients[1])
eig <- sapply(sample, function(x){min(eigen(1 / dim(x)[1] * t(x[, 2:(p+1)]) %*% x[, 2:(p+1)])$values )})
return(c(mean(beta_bols), var(beta_bols), mean(eig)))
}
e_func(mc, 90)
save.image("~/Library/CloudStorage/OneDrive-TheUniversityofChicago/Year 3/topics_in_ecm_bonhomme/psets/pset1/samples.RData")
for (j in 1:length(rho_e)) {
for (i in 1:tries_e) {
table_g[1:3, i, j] <- e_func(mc_g[[i]][[j]], 0.9 * N_tries[i])
table_g[4:6, i, j] <- e_func(mc_g[[i]][[j]], round(20 * log(N_tries[i])))
}
}
# transform so that there's dependence
sample <- function(srn, sigma) {
c <- chol(sigma)
s <- apply(srn, 3, function(x) {x %*% c}, simplify = FALSE)
lapply(s, function(x) {cbind(x[, 1] - x[, 2] + x[, dim(srn)[2]], x[, 1:dim(srn)[2] - 1])})
}
# a function that gives out a covariance matrix given \rho
sig <- function(rho, p) {
sig <- matrix(rho_e[j], p + 1, p + 1)
sig[(p+1), ] <- rep(0, p + 1)
sig[, (p+1)] <- rep(0, p + 1)
diag(sig) <- rep(1, p + 1)
sig
}
sig(0.3, 4)
# a function that gives out a covariance matrix given \rho
sig <- function(rho, p) {
sig <- matrix(rho, p + 1, p + 1)
sig[(p+1), ] <- rep(0, p + 1)
sig[, (p+1)] <- rep(0, p + 1)
diag(sig) <- rep(1, p + 1)
sig
}
sig(0.3, 4)
for (j in 1:length(rho_e)) {
sig_g <- sig(rho_e[j], p_g)
mc_g[[j]][[4]] <- sample(srn, sig_g)
}
c(1:5, 10)
sample_r <- function(full_sample, sigma, p) {
c <- chol(sigma)
sp <- full_sample[, c(1:p, dim(full_sample)[2])]
spc <- sp %*% c
cbind(spc[, 1] - spc[, 2] + spc[, p + 1], spc[, 1:p])
}
ex <- sample_r(srn[, , 1], diag(101), 100)
coefs <- rep(0, N_samples)
for (s in 1:N_samples) {
p = 900
sample <- sample_r(srn[, , s], diag(p + 1), p)
coefs[s] <- ols(sample, p)
}
warnings()
coefs2 <- rep(0, N_samples)
for (s in 1:3) {
p = 900
sample <- sample_r(srn[, , s], diag(p + 1), p)
coefs2[s] <- ols(sample, p)[1]
}
coefs_eig <- vector('list', length = length(rho_e))
coefs_eif <- lapply(coefs_eig, function(x) {vector('list', tries_e)})
rm(coefs_eif)
coefs_eig <- vector('list', length = length(rho_e))
coefs_eig <- lapply(coefs_eig, function(x) {vector('list', tries_e)})
rep(list(matrix(2, 3, 3)))
rep(list(matrix(2, 3, 3)), 2)
coefs_eig <- vector('list', length = length(rho_e))
coefs_eig <- lapply(coefs_eig, function(x) {rep(list(matrix(0, 6, N_samples)), tries_e)})
coefs_eig <- vector('list', length = length(rho_e))
coefs_eig <- lapply(coefs_eig, function(x) {rep(list(matrix(0, 4, N_samples)), tries_e)})
sigma <- list(c(rho_e))
sigma <- list(rho_e)
sigma <- list(0, 0.5, 0.9)
# a function that gives out a covariance matrix given \rho
sig <- function(rho, p) {
sig <- matrix(rho, p + 1, p + 1)
sig[(p+1), ] <- rep(0, p + 1)
sig[, (p+1)] <- rep(0, p + 1)
diag(sig) <- rep(1, p + 1)
sig
}
sigma <- lapply(sigma, sig(x, p))
sigma <- lapply(sigma, sig(, p))
sigma <- lapply(sigma, sig(., p))
sigma <- lapply(sigma, sig, p = p)
for (j in 1:length(rho_e)) {
for (s in 1:3) {
sample <- sample_r(srn[, , s], sigma[[j]], p)
for (i in 1:tries_e) {
ss <- 0.9 * N_tries[i]
slog <- round(20 * log(N_tries[i]))
coefs_eig[[j]][[i]][1, s] <- ols(sample, ss)
coefs_eig[[j]][[i]][2, s] <- min(eigen(1 / N_tries[i] * t(sample[, 2:(ss+1)]) %*% sample[, 2:(ss+1)])$values )
coefs_eig[[j]][[i]][3, s] <- ols(sample, slog)
coefs_eig[[j]][[i]][4, s] <- min(eigen(1 / N_tries[i] * t(sample[, 2:(slog+1)]) %*% sample[, 2:(slog+1)])$values )
}
}
}
View(ols)
for (j in 1:length(rho_e)) {
for (s in 1:3) {
sample <- sample_r(srn[, , s], sigma[[j]], p)
for (i in 1:tries_e) {
ss <- 0.9 * N_tries[i]
slog <- round(20 * log(N_tries[i]))
coefs_eig[[j]][[i]][1, s] <- ols(sample, ss)[1]
coefs_eig[[j]][[i]][2, s] <- min(eigen(1 / N_tries[i] * t(sample[, 2:(ss+1)]) %*% sample[, 2:(ss+1)])$values )
coefs_eig[[j]][[i]][3, s] <- ols(sample, slog)[1]
coefs_eig[[j]][[i]][4, s] <- min(eigen(1 / N_tries[i] * t(sample[, 2:(slog+1)]) %*% sample[, 2:(slog+1)])$values )
}
}
}
View(coefs_eig)
coefs_eig[[1]][[1]][1, 1]
coefs_eig[[1]][[1]][1, 1"3"]
coefs_eig[[1]][[1]][1, 1:3]
coefs_eig[[1]][[1]][1, 1:5]
View(coefs_eig)
coefs_eig[[1]][[1]][, 1:5]
coefs_eig[[2]][[3]][, 1:5]
coefs_eig <- vector('list', length = length(rho_e))
coefs_eig <- lapply(coefs_eig, function(x) {rep(list(matrix(0, 4, N_samples)), tries_e)})
for (j in 1:length(rho_e)) {
for (s in 1:N_samples) {
sample <- sample_r(srn[, , s], sigma[[j]], p)
for (i in 1:tries_e) {
ss <- 0.9 * N_tries[i]
slog <- round(20 * log(N_tries[i]))
coefs_eig[[j]][[i]][1, s] <- ols(sample[1:N_tries[i], ], ss)[1]
coefs_eig[[j]][[i]][2, s] <- min(eigen(1 / N_tries[i] * t(sample[1:N_tries[i], 2:(ss+1)]) %*% sample[1:N_tries[i], 2:(ss+1)])$values )
coefs_eig[[j]][[i]][3, s] <- ols(sample[1:N_tries[i]], slog)[1]
coefs_eig[[j]][[i]][4, s] <- min(eigen(1 / N_tries[i] * t(sample[1:N_tries[i], 2:(slog+1)]) %*% sample[1:N_tries[i], 2:(slog+1)])$values )
}
}
}
for (j in 1:length(rho_e)) {
for (s in 1:N_samples) {
sample <- sample_r(srn[, , s], sigma[[j]], p)
for (i in 1:tries_e) {
ss <- 0.9 * N_tries[i]
slog <- round(20 * log(N_tries[i]))
coefs_eig[[j]][[i]][1, s] <- ols(sample[1:N_tries[i], ], ss)[1]
coefs_eig[[j]][[i]][2, s] <- min(eigen(1 / N_tries[i] * t(sample[1:N_tries[i], 2:(ss+1)]) %*% sample[1:N_tries[i], 2:(ss+1)])$values )
coefs_eig[[j]][[i]][3, s] <- ols(sample[1:N_tries[i]], slog)[1]
coefs_eig[[j]][[i]][4, s] <- min(eigen(1 / N_tries[i] * t(sample[1:N_tries[i], 2:(slog+1)]) %*% sample[1:N_tries[i], 2:(slog+1)])$values )
}
}
}
for (j in 1:length(rho_e)) {
for (s in 1:3) {
sample <- sample_r(srn[, , s], sigma[[j]], p)
for (i in 1:tries_e) {
ss <- 0.9 * N_tries[i]
slog <- round(20 * log(N_tries[i]))
coefs_eig[[j]][[i]][1, s] <- ols(sample[1:N_tries[i], ], ss)[1]
coefs_eig[[j]][[i]][2, s] <- min(eigen(1 / N_tries[i] * t(sample[1:N_tries[i], 2:(ss+1)]) %*% sample[1:N_tries[i], 2:(ss+1)])$values )
coefs_eig[[j]][[i]][3, s] <- ols(sample[1:N_tries[i], ], slog)[1]
coefs_eig[[j]][[i]][4, s] <- min(eigen(1 / N_tries[i] * t(sample[1:N_tries[i], 2:(slog+1)]) %*% sample[1:N_tries[i], 2:(slog+1)])$values )
}
}
}
coefs_eig[[1]][[1]][, 1:5]
for (j in 1:length(rho_e)) {
for (s in 1:3) {
sample <- sample_r(srn[, , s], sigma[[j]], p)
for (i in 1:tries_e) {
ss <- 0.9 * N_tries[i]
slog <- round(20 * log(N_tries[i]))
coefs_eig[[j]][[i]][1, s] <- ols(sample[1:N_tries[i], ], ss)[1]
coefs_eig[[j]][[i]][2, s] <- min(eigen(1 / N_tries[i] * t(sample[1:N_tries[i], 2:(ss+1)]) %*% sample[1:N_tries[i], 2:(ss+1)])$values )
coefs_eig[[j]][[i]][3, s] <- ols(sample[1:N_tries[i], ], slog)[1]
coefs_eig[[j]][[i]][4, s] <- min(eigen(1 / N_tries[i] * t(sample[1:N_tries[i], 2:(slog+1)]) %*% sample[1:N_tries[i], 2:(slog+1)])$values )
}
}
}
coefs_eig <- vector('list', length = length(rho_e))
coefs_eig <- lapply(coefs_eig, function(x) {rep(list(matrix(0, 4, N_samples)), tries_e)})
for (j in 1:length(rho_e)) {
for (s in 1:N_samples) {
sample <- sample_r(srn[, , s], sigma[[j]], p)
for (i in 1:tries_e) {
ss <- 0.9 * N_tries[i]
slog <- round(20 * log(N_tries[i]))
coefs_eig[[j]][[i]][1, s] <- ols(sample[1:N_tries[i], ], ss)[1]
coefs_eig[[j]][[i]][2, s] <- min(eigen(1 / N_tries[i] * t(sample[1:N_tries[i], 2:(ss+1)]) %*% sample[1:N_tries[i], 2:(ss+1)])$values )
coefs_eig[[j]][[i]][3, s] <- ols(sample[1:N_tries[i], ], slog)[1]
coefs_eig[[j]][[i]][4, s] <- min(eigen(1 / N_tries[i] * t(sample[1:N_tries[i], 2:(slog+1)]) %*% sample[1:N_tries[i], 2:(slog+1)])$values )
}
}
}
saveRDS(coefs_eig, file = 'coefs_eig.RData')
as.list(rho_e)
m <- matrix(1:4, 2)
apply(m, 1, sum)
View(m)
apply(m, c(1, 2), sum)
m[, 2] <- c(5, 6)
mean(coefs_eig[[1]][[1]][1, ])
table_g <- array(0, dim = c(6, tries_e, 3))
for (j in 1:length(rho_e)) {
for (i in 1:tries_e) {
#table_g[1:3, i, j] <- e_func(mc_g[[i]][[j]], 0.9 * N_tries[i])
#table_g[4:6, i, j] <- e_func(mc_g[[i]][[j]], round(20 * log(N_tries[i])))
table_g[, i, j] <- c(mean(coefs_eig[[j]][[i]][1, ]),
var(coefs_eig[[j]][[i]][1, ]),
mean(coefs_eig[[j]][[i]][2, ]),
mean(coefs_eig[[j]][[i]][3, ]),
var(coefs_eig[[j]][[i]][3, ]),
mean(coefs_eig[[j]][[i]][4, ]))
}
}
table_g
mv <- function(ptilde, samples) {
bols <- sapply(samples, function(x){ols[1]})
#beta_bols <- sapply(bols, function(x) x$coefficients[1])
return(c(mean(beta_bols), var(beta_bols)))
}
mv(1, mc)
mv <- function(ptilde, samples) {
bols <- sapply(samples, function(x){ols(x)[1]})
#beta_bols <- sapply(bols, function(x) x$coefficients[1])
return(c(mean(beta_bols), var(beta_bols)))
}
mv(1, mc)
mv <- function(ptilde, samples) {
bols <- sapply(samples, function(x){ols(x, ptilde)[1]})
#beta_bols <- sapply(bols, function(x) x$coefficients[1])
return(c(mean(beta_bols), var(beta_bols)))
}
mv(1, mc)
table_a <- mv(1, mc)
print(table_a)
summary(1:5)
save(c(table_a, table_g), file = 'output.RData')
save(table_a, table_g, file = 'output.RData')
save(table_a, table_e, file = 'output.RData')
rm(table_a, table_e)
load('output.RData')
save(table_a, table_g, file = 'output.RData')
p_tries <- c(5, 10, 50, 85, 90)
tries <- length(p_tries) # number of 'guesses' for how many regressors to include
table <- matrix(0, 2, tries)
for (i in 1:tries) {
table[, i] <- mv(p_tries[i], mc)
}
View(table)
mv <- function(ptilde, samples) {
bols <- sapply(samples, function(x){ols(x, ptilde)[1]})
#beta_bols <- sapply(bols, function(x) x$coefficients[1])
c(mean(bols), var(bols))
}
table_a <- mv(1, mc)
print(table_a)
rm(table_a)
table_b <- mv(1, mc)
print(table_b)
p_tries <- c(5, 10, 50, 85, 90)
tries <- length(p_tries) # number of 'guesses' for how many regressors to include
table_c <- matrix(0, 2, tries)
for (i in 1:tries) {
table_c[, i] <- mv(p_tries[i], mc)
}
mv(5, mc)
mv(90, mc)
View(table_c)
mv(85, mc)
table_c <- matrix(0, 2, tries)
for (i in 1:tries) {
table_c[, i] <- mv(p_tries[i], mc)
}
rm(mc_g)
View(table_c)
save(table_b, table_c, file = 'output.RData')
p_tries_d <- c(5, 10, 50, 85, 90)
tries_d <- length(p_tries_d)
table_d <- matrix(0, 2, tries_d)
min_eig_pred_er <- function(ptilde, samples) {
eig <- sapply(samples, function(x){min(eigen(1 / dim(x)[1] * t(x[, 3:(ptilde+1)]) %*% x[, 3:(ptilde+1)])$values )})
#proj <- lapply(samples, function(x){lm(x[, 2] ~ x[, 3:(ptilde+1)] -1)})
#sq_pred <- sapply(proj, function(x) mean(x$fitted.values^2))
proj <- lapply(sample, function(x){x[, 2:(ptilde+1)] %*% ols(x, ptilde)})
sq_pred <- sapply(proj, function(x) mean(x^2))
c(mean(eig), mean(sq_pred))
}
min_eig_pred_er(5, mc)
min_eig_pred_er <- function(ptilde, samples) {
eig <- sapply(samples, function(x){min(eigen(1 / dim(x)[1] * t(x[, 3:(ptilde+1)]) %*% x[, 3:(ptilde+1)])$values )})
#proj <- lapply(samples, function(x){lm(x[, 2] ~ x[, 3:(ptilde+1)] -1)})
#sq_pred <- sapply(proj, function(x) mean(x$fitted.values^2))
proj <- lapply(samples, function(x){x[, 2:(ptilde+1)] %*% ols(x, ptilde)})
sq_pred <- sapply(proj, function(x) mean(x^2))
c(mean(eig), mean(sq_pred))
}
min_eig_pred_er(5, mc)
min_eig_pred_er(50, mc)
min_eig_pred_er <- function(ptilde, samples) {
eig <- sapply(samples, function(x){min(eigen(1 / dim(x)[1] * t(x[, 3:(ptilde+1)]) %*% x[, 3:(ptilde+1)])$values )})
proj <- lapply(samples, function(x){lm(x[, 2] ~ x[, 3:(ptilde+1)] -1)})
sq_pred <- sapply(proj, function(x) mean(x$fitted.values^2))
#proj <- lapply(samples, function(x){x[, 2:(ptilde+1)] %*% ols(x, ptilde)})
#sq_pred <- sapply(proj, function(x) mean(x^2))
c(mean(eig), mean(sq_pred))
}
min_eig_pred_er(5, mc)
proj_1 <- lapply(mc, function(x){x[, 2:(ptilde+1)] %*% ols(x, 5)})
proj_1 <- lapply(mc, function(x){x[, 2:(5+1)] %*% ols(x, 5)})
proj <- lapply(mc, function(x){lm(x[, 2] ~ x[, 3:(5+1)] -1)})
View(proj)
ols(mc[[1]], 5)
ols(mc[[2]], 5)
mc[[1]][, 2:]
mc[[1]][, -1]
ols(mc[[1]][, -1], 5)
proj_1 <- lapply(mc, function(x){x[, 3:(5+1)] %*% ols(x[, -1], 5)})
ols(mc[[1]][, -1], 4)
proj_1 <- lapply(mc, function(x){x[, 3:(5+1)] %*% ols(x[, -1], 5-1)})
min_eig_pred_er <- function(ptilde, samples) {
eig <- sapply(samples, function(x){min(eigen(1 / dim(x)[1] * t(x[, 3:(ptilde+1)]) %*% x[, 3:(ptilde+1)])$values )})
#proj <- lapply(samples, function(x){lm(x[, 2] ~ x[, 3:(ptilde+1)] -1)})
#sq_pred <- sapply(proj, function(x) mean(x$fitted.values^2))
proj <- lapply(samples, function(x){x[, 3:(ptilde+1)] %*% ols(x[, -1], ptilde - 1)})
sq_pred <- sapply(proj, function(x) mean(x^2))
c(mean(eig), mean(sq_pred))
}
min_eig_pred_er(5, mc)
rm(proj, proj_1)
for (i in 1:tries_d) {
table_d[, i] <- min_eig_pred_er(p_tries_d[i], mc)
}
View(table_d)
p_e <- 90
sigma_e <- lapply(as.list(rho_e), sig, p = p_e) # store covariance matrices not to make them anew each time they're called
sigma_chol_e <- lapply(sigma_e, chol)
View(sigma_chol_e)
# transform so that there's dependence
sample <- function(srn, sigma_chol) {
c <- chol(sigma)
s <- apply(srn, 3, function(x) {x %*% sigma_chol}, simplify = FALSE)
lapply(s, function(x) {cbind(x[, 1] - x[, 2] + x[, dim(srn)[2]], x[, 1:(dim(srn)[2] - 1)])})
}
# a function that returns mean and variance of beta_1 and the mean lowest eigenvalue
e_func <- function(sample, p) {
beta_bols <- sapply(sample, function(x){ols(x, p)[1]})
#beta_bols <- sapply(bols, function(x) x$coefficients[1])
eig <- sapply(sample, function(x){min(eigen(1 / dim(x)[1] * t(x[, 2:(p+1)]) %*% x[, 2:(p+1)])$values )})
c(mean(beta_bols), var(beta_bols), mean(eig))
}
mc_e <- vector('list', length = tries_e)
mc_e[[1]] <- sample(srn[1:N_tries[i], 1:p_e, ], sigma_chol_e[[2]])
# transform so that there's dependence
sample <- function(srn, sigma_chol) {
#c <- chol(sigma)
s <- apply(srn, 3, function(x) {x %*% sigma_chol}, simplify = FALSE)
lapply(s, function(x) {cbind(x[, 1] - x[, 2] + x[, dim(srn)[2]], x[, 1:(dim(srn)[2] - 1)])})
}
mc_e[[1]] <- sample(srn[1:N_tries[i], 1:p_e, ], sigma_chol_e[[2]])
mc_e[[1]] <- sample(srn[1:N_tries[2], 1:p_e, ], sigma_chol_e[[2]])
mc_e[[1]] <- sample(srn[1:N_tries[2], 1:(p_e+1), ], sigma_chol_e[[2]])
for (j in 1:length(rho_e)) {
mc_e <- vector('list', length = tries_e)
for (i in 1:tries_e) {
#mc_b_e <- rep(list(c(p_e, N_tries[i])), N_samples)
#mc_e[[i]] <- lapply(mc_b_e, function(x){sample(x[1], x[2], sig)})
mc_e[[i]] <- sample(srn[1:N_tries[i], 1:(p_e+1), ], sigma_chol_e[[j]])
table_e[, i, j] <- e_func(mc_e[[i]], p_e)
}
rm(mc_e)
}
for (i in 1:length(rho_e)) {
print(table_e[, , i])
}
table_4dim <- array(1, dim = c(2, 3, 4))
table_4dim <- array(1, dim = c(2, 3, 4, 2))
a <- matrix(1, c(2, 2))
a <- matrix(1, dim = c(2, 2))
a <- matrix(1, 2, 2)
a <- array(1, c(2, 2))
c <- array(1, dim = c(2, 3, 4, 2))
b <- array(1, dim = c(2, 3, 4))
d <- array(1, dim = 4)
d <- array(1, dim = c(4))
d <- 1:4
d <- c(1:4)
d <- c(1.5, 2.3)
rm(a, b, c, d, table_4dim)
save(table_b, table_c, table_d, table_e, file = 'output.RData')
print(table_e)
eig_rho <- vector('list', length = length(rho_e))
eig_big_rho <- vector('list', length = length(rho_e))
for (j in 1:length(rho_e)) {
mc_e <- vector('list', length = tries_e)
for (i in 1:tries_e) {
mc_e[[i]] <- sample(srn[1:N_tries[i], 1:(p_e+1), ], sigma_chol_e[[j]])
table_e[, i, j] <- e_func(mc_e[[i]], p_e)
# 1 step ahead -- to avoid remaking samples again for the next question
if (N_tries[i] == 1000) {
all_eig <- lapply(mc_e[[i]], function(x) {sort(eigen(1 / dim(x)[1] * t(x[, 2:(p_e+1)]) %*% x[, 2:(p_e+1)])$values)})
almost_all_eig <- lapply(all_eig, function(x) {x[-p_e]})
biggest_eig <- lapply(all_eig, function(x) {x[p_e]})
eig_rho[[j]] <- colMeans(do.call(rbind, almost_all_eig))
eig_big_rho[[j]] <- mean(unlist(biggest_eig))
rm(all_eig, almost_all_eig, biggest_eig)
}
}
rm(mc_e)
}
x_rho <- c(sapply(rho_e, function(x) rep(x, p_e - 1)))
y_rho <- unlist(eig_rho)
plot(x_rho, y_rho)
print(eig_big_rho)
save(table_b, table_c, table_d, table_e, eig_rho, eig_big_rho, file = 'output.RData')
save(table_b, table_c, table_d, table_e, eig_rho, eig_big_rho, table_g, file = 'output.RData')
xtable(table_e,  type = 'latex')
library(xttable)
library(xtable)
install.packages("xtable")
library(xtable)
xtable(table_e,  type = 'latex')
inv <- lapply(sigma_e, inv)
inv <- lapply(sigma_e, inverse)
inv <- lapply(sigma_e, solve)
max(N_tries)
